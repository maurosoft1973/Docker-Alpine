image: docker:23.0.4

variables:
    # DOCKER_HOST
    # DOCKER_HUB_USERNAME
    # DOCKER_HUB_PASSWORD
    # GITLAB_TOKEN
    DOCKER_HOST: $DOCKER_HOST
    DOCKER_TLS_CERTDIR: ""
    DOCKER_CLI_EXPERIMENTAL: enabled
    DOCKER_DRIVER: overlay2

services:
    - name: docker:23.0.4-dind
      alias: docker

include:
    - template: Jobs/Build.gitlab-ci.yml
    - template: Security/Container-Scanning.gitlab-ci.yml
    
stages:
    - build
    - test
    - deploy
    - readme
    - clean

before_script:
    - apk add --no-cache git bash curl file
    - /bin/bash
    - ENV_ALPINE_VERSION=.${CI_ALPINE_VERSION:-""}
    - |
        if [ "${CI_ALPINE_VERSION:-""}" == "" ]; then 
            ENV_ALPINE_VERSION=.env
        else
            ENV_ALPINE_VERSION=.env.${CI_ALPINE_VERSION:-""}
        fi
    - set -a;
    - source ./${ENV_ALPINE_VERSION};
    - set +a;
    - |
      export JOB_ALPINE_VERSION=${CI_ALPINE_VERSION:-"$ALPINE_VERSION"}
      export JOB_ALPINE_VERSION_DATE=${CI_ALPINE_VERSION_DATE:-"$ALPINE_VERSION_DATE"}
      export JOB_ALPINE_RELEASE=${CI_ALPINE_RELEASE:-"$ALPINE_RELEASE"}

build:
    stage: build
    image: docker:23.0.4
    tags:
        - dind64
    script:
        - BUILD_DATE=$(date +"%Y-%m-%d")
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - |
            while IFS=" " read -r JOB_ARCH
            do
                PLATFORM="linux/amd64"
                if [ "${JOB_ARCH}" == "aarch64" ]; then
                    PLATFORM="linux/arm64"
                elif [ "${JOB_ARCH}" == "armhf" ]; then
                    PLATFORM="linux/arm/v6"
                elif [ "${JOB_ARCH}" == "armv7" ]; then
                    PLATFORM="linux/arm/v7"
                elif [ "${JOB_ARCH}" == "ppc64le" ]; then
                    PLATFORM="linux/ppc64le"
                elif [ "${JOB_ARCH}" == "x86" ]; then
                    PLATFORM="linux/386"
                elif [ "${JOB_ARCH}" == "x86_64" ]; then
                    PLATFORM="linux/amd64"
                fi

                echo "Build Image for $JOB_ARCH -> ${GITLAB_CR_URL}/${GITLAB_CR_GROUP}/${GITLAB_CR_IMAGE}:test-${JOB_ARCH}"
                docker build --platform ${PLATFORM} \
                    --build-arg BUILD_DATE=${BUILD_DATE} \
                    --build-arg ALPINE_ARCHITECTURE=${JOB_ARCH} \
                    --build-arg ALPINE_RELEASE=${JOB_ALPINE_RELEASE} \
                    --build-arg ALPINE_VERSION=${JOB_ALPINE_VERSION} \
                    --build-arg ALPINE_VERSION_DATE="${JOB_ALPINE_VERSION_DATE}" \
                    --push \
                    -t ${GITLAB_CR_URL}/${GITLAB_CR_GROUP}/${GITLAB_CR_IMAGE}:test-${JOB_ARCH} \
                    -f ./Dockerfile .

            done < "./.arch"
        - |
            echo "Push Manifest Test -> ${GITLAB_CR_URL}/${GITLAB_CR_GROUP}/${GITLAB_CR_IMAGE}:test"
            docker manifest create ${GITLAB_CR_URL}/${GITLAB_CR_GROUP}/${GITLAB_CR_IMAGE}:test \
                --amend ${GITLAB_CR_URL}/${GITLAB_CR_GROUP}/${GITLAB_CR_IMAGE}:test-aarch64 \
                --amend ${GITLAB_CR_URL}/${GITLAB_CR_GROUP}/${GITLAB_CR_IMAGE}:test-armhf \
                --amend ${GITLAB_CR_URL}/${GITLAB_CR_GROUP}/${GITLAB_CR_IMAGE}:test-armv7 \
                --amend ${GITLAB_CR_URL}/${GITLAB_CR_GROUP}/${GITLAB_CR_IMAGE}:test-ppc64le \
                --amend ${GITLAB_CR_URL}/${GITLAB_CR_GROUP}/${GITLAB_CR_IMAGE}:test-x86 \
                --amend ${GITLAB_CR_URL}/${GITLAB_CR_GROUP}/${GITLAB_CR_IMAGE}:test-x86_64
                
            docker manifest push ${GITLAB_CR_URL}/${GITLAB_CR_GROUP}/${GITLAB_CR_IMAGE}:test

container_scanning:
    before_script: []
    tags:
        - dind64
    variables:
        CS_IMAGE: registry.gitlab.com/maurosoft1973-docker/alpine:test

deploy:
    stage: deploy
    image: docker:23.0.4
    needs: ["build"]
    tags:
        - dind64
    script:
        - BUILD_DATE=$(date +"%Y-%m-%d")
        - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
        - |
            while IFS=" " read -r JOB_ARCH
            do
                PLATFORM="linux/amd64"
                if [ "${JOB_ARCH}" == "aarch64" ]; then
                    PLATFORM="linux/arm64"
                elif [ "${JOB_ARCH}" == "armhf" ]; then
                    PLATFORM="linux/arm/v6"
                elif [ "${JOB_ARCH}" == "armv7" ]; then
                    PLATFORM="linux/arm/v7"
                elif [ "${JOB_ARCH}" == "ppc64le" ]; then
                    PLATFORM="linux/ppc64le"
                elif [ "${JOB_ARCH}" == "x86" ]; then
                    PLATFORM="linux/386"
                elif [ "${JOB_ARCH}" == "x86_64" ]; then
                    PLATFORM="linux/amd64"
                fi

                echo "Build Image for $JOB_ARCH -> ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:${JOB_ALPINE_VERSION}-${JOB_ARCH}"

                docker build --platform ${PLATFORM} \
                    --build-arg BUILD_DATE=${BUILD_DATE} \
                    --build-arg ALPINE_ARCHITECTURE=${JOB_ARCH} \
                    --build-arg ALPINE_RELEASE=${JOB_ALPINE_RELEASE} \
                    --build-arg ALPINE_VERSION=${JOB_ALPINE_VERSION} \
                    --build-arg ALPINE_VERSION_DATE="${JOB_ALPINE_VERSION_DATE}" \
                    --push \
                    -t ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:${JOB_ALPINE_VERSION}-${JOB_ARCH} \
                    -t ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:${JOB_ARCH} \
                    -f ./Dockerfile .

            done < "./.arch"
        - |
            echo "Push Manifest Current -> ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:${JOB_ALPINE_VERSION}"
            docker manifest create ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:${JOB_ALPINE_VERSION} \
                --amend ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:${JOB_ALPINE_VERSION}-aarch64 \
                --amend ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:${JOB_ALPINE_VERSION}-armhf \
                --amend ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:${JOB_ALPINE_VERSION}-armv7 \
                --amend ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:${JOB_ALPINE_VERSION}-ppc64le \
                --amend ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:${JOB_ALPINE_VERSION}-x86 \
                --amend ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:${JOB_ALPINE_VERSION}-x86_64

            docker manifest push ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:${JOB_ALPINE_VERSION}
        - |
            echo "Push Manifest Latest -> ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}"
            docker manifest create ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE} \
                --amend ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:aarch64 \
                --amend ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:armhf \
                --amend ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:armv7 \
                --amend ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:ppc64le \
                --amend ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:x86 \
                --amend ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}:x86_64

            docker manifest push ${DOCKER_HUB_GROUP}/${DOCKER_HUB_IMAGE}

readme:
    stage: readme
    image: docker:23.0.4
    needs: ["deploy"]
    variables:
        DOCKERHUB_REPO_PREFIX: "maurosoft1973"
        DOCKERHUB_REPO_NAME: "alpine"
        DOCKERHUB_SHORT_DESCRIPTION: "Alpine Linux Docker Image with Multilanguage e Timezone support"
    tags:
        - dind64
    script:
        - export LAST_UPDATE=$(date +"%d.%m.%Y %H:%M:%S")
        - |
          git config --global user.email "mauro.cardillo@gmail.com"
          git config --global user.name "Mauro Cardillo"
          git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/$CI_PROJECT_PATH.git /tmp/repository
        - cd /tmp/repository
        - echo "Generate README for Alpine Version ${ALPINE_VERSION}"
        - |
          sed "s/\%ALPINE_RELEASE\%/${JOB_ALPINE_RELEASE}/g" README.tpl > README_COMPILE.md1
          sed "s/\%ALPINE_VERSION\%/${JOB_ALPINE_VERSION}/g" README_COMPILE.md1 > README_COMPILE.md2
          sed "s/\%ALPINE_VERSION_DATE\%/${JOB_ALPINE_VERSION_DATE}/g" README_COMPILE.md2 > README_COMPILE.md3
          sed "s/\%LAST_UPDATE\%/${LAST_UPDATE}/g" README_COMPILE.md3 > README.md
          rm -rf README_COMPILE.*
        - |
          git add .
          git commit -m "Update README for Alpine Version ${ALPINE_VERSION}"
          git push --push-option="ci.skip" https://gitlab-ci-token:${GITLAB_TOKEN}@${CI_SERVER_HOST}/$CI_PROJECT_PATH.git HEAD:$CI_COMMIT_BRANCH
        - |
          FULL_DESCRIPTION=$(if [ -f "$(pwd)/README.md" ]; then cat "$(pwd)/README.md"; else echo ""; fi)
          docker pull maurosoft1973/alpine-readme-to-dockerhub
          docker run --rm -e DOCKERHUB_USERNAME="$DOCKER_HUB_USERNAME" -e DOCKERHUB_PASSWORD="$DOCKER_HUB_PASSWORD" -e DOCKERHUB_REPO_PREFIX="$DOCKERHUB_REPO_PREFIX" -e DOCKERHUB_REPO_NAME="$DOCKERHUB_REPO_NAME" -e SHORT_DESCRIPTION="$DOCKERHUB_SHORT_DESCRIPTION" -e FULL_DESCRIPTION="$FULL_DESCRIPTION" maurosoft1973/alpine-readme-to-dockerhub

clean:
    stage: clean
    needs: ["deploy"]
    tags:
        - dind64
    only:
        - master
    script:
        - docker rmi -f ${DOCKER_HUB_URL}/${DOCKER_HUB_PREFIX}/${DOCKER_IMAGE} > /dev/null 2>&1